{"version":3,"sources":["Components/Timer/index.jsx","Components/RevealedItem/index.jsx","Services/helpers.js","Components/DataField/index.jsx","Components/Select/index.jsx","Components/Form/index.jsx","Services/httpClient.js","Services/localStorage.js","Services/http.js","Pages/Play/index.jsx","Apis/trainApi.js","Pages/HowTo/index.jsx","routes.js","Pages/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["getDisplayTime","time","toString","length","countdownTime","secs","divisorMinutes","divisionSeconds","hours","Math","floor","minutes","seconds","ceil","Timer","timeSeconds","displayButtons","onFinished","useRef","useState","current","currTime","setCurrTime","isOn","setIsOn","timer","countDown","currSeconds","clearInterval","startTimer","setInterval","useEffect","className","type","onClick","TIMER_SECS","RevealedItem","isLoading","title","width","isVisible","departureTime","totalItems","platform","isRevealed","setIsRevealed","isTimerFinished","setTimerFinished","justify","align","bordered","split","moment","fromNow","getTimeToDeparture","debounce","callback","wait","timeout","args","context","clearTimeout","setTimeout","apply","DataField","isDisabled","value","children","readOnly","setReadOnly","closable","onClose","SelectCustom","data","rest","currData","setCurrData","isFetching","setIsFetching","lastFetchId","onSearch","val","Promise","resolve","fetchId","valToLower","toLowerCase","result","filter","t","stationName","includes","crsCode","notFoundContent","size","filterOption","map","Option","key","WrappedHorizontalLoginForm","create","name","props","fieldsError","manualTimeSetup","setManualTimeSetup","form","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","setFieldsValue","getFieldValue","dateDepartureError","timeDepartureError","getDataValue","field","format","fieldValue","interval","timeDeparture","validateFields","layout","onSubmit","e","date","offsetFrom","offsetTo","station","preventDefault","err","dateDeparture","timeOffsetFrom","timeOffsetTo","trainStation","Panel","header","Item","label","validateStatus","help","initialValue","rules","required","message","Select","style","showSearch","placeholder","onChange","Trains","disabledDate","subtract","endOf","dateStr","onOpenChange","currTimeStr","margin","block","htmlType","disabled","Object","keys","some","HttpClient","protocol","domain","this","config","method","path","queryString","url","buildUrl","axios","res","get","item","localStorage","getItem","JSON","parse","set","currValue","createdDate","Date","stampValue","stringify","setItem","remove","removeItem","cleanStorage","entries","forEach","now","Http","client","cachedResult","request","response","trainsApi","http","fromOffsetTime","toOffsetTime","Error","formatedDate","formatedTime","fromOffset","toOffset","process","join","departures","all","console","log","PlayGame","setDepartures","randomDeparture","setRandomDeparture","setIsLoading","setIsVisible","errorMessage","setErrorMessage","selectRandomDeparture","currDepartures","random","maxNumber","randomNumber","a","getTrains","sm","span","offset","xs","description","showIcon","destination_name","aimed_departure_time","HowToPlay","routes","component","exact","Content","Footer","Page","theme","Routes","route","textAlign","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c507270e.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Button } from 'antd';\nimport './Timer.less';\n\nfunction getDisplayTime(time) {\n  return time.toString().length === 1 ? `0${time}` : time;\n}\n\nfunction countdownTime(secs) {\n  const hours = Math.floor(secs / (60 * 60));\n  const displayHours = getDisplayTime(hours);\n  const divisorMinutes = secs % (60 * 60);\n  const minutes = Math.floor(divisorMinutes / 60);\n  const displayMinutes = getDisplayTime(minutes);\n\n  const divisionSeconds = divisorMinutes % 60;\n  const seconds = Math.ceil(divisionSeconds);\n  const displaySeconds = getDisplayTime(seconds);\n\n  return {\n    hours: displayHours,\n    minutes: displayMinutes,\n    seconds: displaySeconds,\n  };\n}\n\nfunction Timer({ timeSeconds = 10, displayButtons = true, onFinished = null }) {\n  const seconds = useRef(timeSeconds);\n  const [currTime, setCurrTime] = useState(countdownTime(seconds.current));\n  const [isOn, setIsOn] = useState(false);\n  const timer = useRef(0);\n\n\n  function countDown() {\n    // Remove one second, set state so a re-render happens.\n    const currSeconds = seconds.current - 1;\n    seconds.current = currSeconds;\n    setCurrTime(countdownTime(currSeconds));\n\n    // Check if we're at zero.\n    if (seconds.current === 0) {\n      clearInterval(timer.current);\n      setIsOn(false);\n      if (onFinished) {\n        onFinished();\n      }\n    }\n  }\n\n  function startTimer() {\n    if (!timer.current && seconds.current > 0) {\n      timer.current = setInterval(countDown, 1000);\n      setIsOn(true);\n    }\n  }\n\n  function stopTimer() {\n    clearInterval(timer.current);\n    timer.current = null;\n    setIsOn(false);\n  }\n\n  function resetTimer() {\n    clearInterval(timer.current);\n    timer.current = null;\n    seconds.current = timeSeconds;\n    setCurrTime(countdownTime(seconds.current));\n    setIsOn(false);\n  }\n\n\n  useEffect(() => {\n    if (!displayButtons) {\n      startTimer();\n    }\n  }, []);\n\n  return (\n    <div>\n      <h3 className={`timer ${isOn && 'timer--pulsing'}`}>\n        {currTime.minutes}:{currTime.seconds}\n      </h3>\n      {displayButtons && (\n        <>\n          <Button type=\"primary\" onClick={startTimer}>\n            Start\n          </Button>\n          <Button type=\"danger\" onClick={stopTimer}>\n            Stop\n          </Button>\n          <Button type=\"ghost\" onClick={resetTimer}>\n            Reset\n          </Button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Timer;\n","import React, { useState } from 'react';\nimport {\n  Spin, Card, Button, Row, Col,\n} from 'antd';\nimport moment from 'moment';\nimport Timer from '../Timer';\nimport './RevealedItem.less';\n\nconst TIMER_SECS = 5;\n\nfunction RevealedItem({\n  isLoading = false,\n  title,\n  width,\n  isVisible = true,\n  departureTime,\n  totalItems,\n  platform,\n}) {\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [isTimerFinished, setTimerFinished] = useState(false);\n  if (!isVisible) {\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <Card width={width} className=\"loading-card\">\n        <Spin />\n      </Card>\n    );\n  }\n\n  function getTimeToDeparture() {\n    const time = departureTime.split(':');\n    return moment().hours(time[0]).minutes(time[1]).fromNow();\n  }\n\n  function getTitle() {\n    return (\n      <div>\n        <Row type=\"flex\" justify=\"space-between\" align=\"middle\">\n          <Col>{isRevealed ? title : ''}</Col>\n          <Col>\n            <Button\n              onClick={() => setIsRevealed(!isRevealed)}\n              className=\"revealed-item__reveal-title_btn\"\n            >\n              {isRevealed ? 'Hide' : 'Reveal'}\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {!isTimerFinished && (\n        <Timer\n          timeSeconds={TIMER_SECS}\n          displayButtons={false}\n          onFinished={() => setTimerFinished(true)}\n        />\n      )}\n      {isTimerFinished && isVisible && (\n        <Card\n          className=\"revealed-item\"\n          title={getTitle()}\n          bordered\n          width={width}\n        >\n          <Row type=\"flex\" justify=\"space-between\">\n            <Col>\n              <p>\n                <strong>Departure:</strong> {departureTime}\n              </p>\n              <p>\n                <strong>Platform:</strong> {platform}\n              </p>\n            </Col>\n            <Col>\n              <p>\n                <strong>Total Items:</strong> {totalItems}\n              </p>\n            </Col>\n            <Col>\n              <p>\n                <strong>Departs</strong> {getTimeToDeparture()}\n              </p>\n            </Col>\n          </Row>\n        </Card>\n      )}\n    </>\n  );\n}\n\nexport default RevealedItem;\n","function randomNumber(maxNumber = 0) {\n  return Math.floor(Math.random() * maxNumber + 1);\n}\n\nfunction debounce(callback, wait) {\n  let timeout;\n  return (...args) => {\n    const context = this;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => callback.apply(context, args), wait);\n  };\n}\n\nexport { randomNumber, debounce };\n","import React, { useState } from 'react';\nimport { Tag } from 'antd';\n\nfunction DataField({ isDisabled, value, children }) {\n  const [readOnly, setReadOnly] = useState(true);\n\n  function getTag() {\n    return <Tag>{value}</Tag>;\n  }\n\n  function getStatefulField() {\n    if (readOnly) {\n      return <Tag closable onClose={() => { setReadOnly(!readOnly); }}> {value}</Tag>;\n    }\n    return children;\n  }\n\n  return isDisabled ? getTag() : getStatefulField();\n}\n\nexport default DataField;\n","import React, { useState, useRef } from 'react';\nimport { Spin, Select } from 'antd';\nimport { debounce } from '../../Services/helpers';\n\nfunction SelectCustom({ data, ...rest }) {\n  const [currData, setCurrData] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const lastFetchId = useRef(0);\n\n  function fetchData(val) {\n    if (val.length < 2) {\n      return Promise.resolve();\n    }\n\n    lastFetchId.current += 1;\n    const fetchId = lastFetchId.current;\n    setCurrData([]);\n    setIsFetching(true);\n\n    return new Promise((resolve) => {\n      if (fetchId !== lastFetchId.current) {\n        return;\n      }\n\n      const valToLower = val.toLowerCase();\n      const result = data.filter(\n        (t) => t.stationName.toLowerCase().includes(valToLower)\n          || t.crsCode.toLowerCase().includes(valToLower),\n      );\n      setCurrData(result);\n      setIsFetching(false);\n      resolve();\n    });\n  }\n\n  return (\n    <Select\n      {...rest}\n      onSearch={debounce(fetchData, 800)}\n      notFoundContent={isFetching ? <Spin size=\"small\" /> : null}\n      filterOption={false}\n    >\n      {currData.map((t) => (\n        <Select.Option key={t.crsCode} value={t.crsCode}>\n          {t.stationName}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n}\n\nexport default SelectCustom;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Form, Button, DatePicker, TimePicker, Row, Col, Collapse,\n} from 'antd';\nimport moment from 'moment';\nimport DataField from '../DataField';\nimport './Form.less';\nimport Trains from '../../Data/trains.json';\nimport Select from '../Select';\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some((field) => fieldsError[field]);\n}\n\nfunction SearchDeparturesForms(props) {\n  const [manualTimeSetup, setManualTimeSetup] = useState(false);\n\n\n  const {\n    form: {\n      getFieldDecorator,\n      getFieldsError,\n      getFieldError,\n      isFieldTouched,\n      setFieldsValue,\n      getFieldValue,\n    },\n  } = props;\n\n  const dateDepartureError = isFieldTouched('date-departure') && getFieldError('date-departure');\n  const timeDepartureError = isFieldTouched('time-departure') && getFieldError('time-departure');\n\n\n  useEffect(() => {\n    if (manualTimeSetup) {\n      return () => { };\n    }\n\n    const interval = setInterval(() => {\n      setFieldsValue({ timeDeparture: moment() });\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  useEffect(() => {\n    props.form.validateFields();\n  }, []);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    let time;\n    let date;\n    let offsetFrom;\n    let offsetTo;\n    let station;\n\n    props.form.validateFields(\n      (\n        err,\n        {\n          timeDeparture,\n          dateDeparture,\n          timeOffsetFrom,\n          timeOffsetTo,\n          trainStation,\n        },\n      ) => {\n        if (err) {\n          return;\n        }\n\n        time = timeDeparture;\n        date = dateDeparture;\n        offsetFrom = timeOffsetFrom;\n        offsetTo = timeOffsetTo;\n        station = trainStation;\n      },\n    );\n\n    if (!time || !date || !offsetFrom || !offsetTo || !station) {\n      return;\n    }\n\n    if (props.onSubmit) {\n      props.onSubmit({\n        date,\n        time,\n        offsetFrom,\n        offsetTo,\n        trainStation: station,\n      });\n    }\n  }\n\n  function getDataValue(field, format) {\n    const fieldValue = getFieldValue(field);\n    if (fieldValue) {\n      return fieldValue.format(format);\n    }\n    return fieldValue;\n  }\n\n  function disabledDate(current) {\n    return (\n      current\n      && current\n        < moment()\n          .subtract(1, 'days')\n          .endOf('day')\n    );\n  }\n\n  return (\n    <Form layout=\"inline\" onSubmit={handleSubmit}>\n      <Row>\n        <Collapse bordered={false}>\n          <Collapse.Panel\n            header=\"Options\"\n            key=\"1\"\n            className=\"departure-form__options\"\n          >\n            <Row>\n              <Form.Item\n                label=\"Departure Date\"\n                validateStatus={dateDepartureError ? 'error' : ''}\n                help={dateDepartureError || ''}\n              >\n                <DataField\n                  label=\"Train Station\"\n                  value={getFieldValue('trainStation')}\n                  isDisabled={false}\n                >\n                  {getFieldDecorator('trainStation', {\n                    initialValue: 'KGX',\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Please input departure train station!',\n                      },\n                    ],\n                  })(\n                    <Select\n                      style={{ width: 200 }}\n                      showSearch\n                      placeholder=\"Select train station\"\n                      onChange={(station) => {\n                        setFieldsValue({ trainStation: station });\n                      }}\n                      data={Trains}\n                    />,\n                  )}\n                </DataField>\n              </Form.Item>\n            </Row>\n            <Row>\n              <Form.Item\n                label=\"Departure Date\"\n                validateStatus={dateDepartureError ? 'error' : ''}\n                help={dateDepartureError || ''}\n              >\n                <DataField\n                  label=\"Departure Date\"\n                  value={getDataValue('dateDeparture', 'DD-MM-YYYY')}\n                  isDisabled={false}\n                >\n                  {getFieldDecorator('dateDeparture', {\n                    initialValue: moment(),\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Please input your departure date!',\n                      },\n                    ],\n                  })(\n                    <DatePicker\n                      placeholder=\"Departure Date\"\n                      disabledDate={disabledDate}\n                      onChange={(date, dateStr) => {\n                        setFieldsValue({ dateDeparture: dateStr });\n                      }}\n                    />,\n                  )}\n                </DataField>\n              </Form.Item>\n              <Form.Item\n                label=\"Departure Time\"\n                validateStatus={timeDepartureError ? 'error' : ''}\n                help={timeDepartureError || ''}\n              >\n                <DataField\n                  value={getDataValue('timeDeparture', 'HH:mm')}\n                  isDisabled={false}\n                >\n                  {getFieldDecorator('timeDeparture', {\n                    initialValue: moment(),\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Please input your departure time!',\n                      },\n                    ],\n                  })(\n                    <TimePicker\n                      format=\"HH:mm:ss\"\n                      onOpenChange={() => {\n                        setManualTimeSetup(true);\n                      }}\n                      onChange={(t, currTimeStr) => {\n                        setFieldsValue({ timeDeparture: currTimeStr });\n                      }}\n                    />,\n                  )}\n                </DataField>\n              </Form.Item>\n            </Row>\n            <Row>\n              <p style={{ margin: 0 }}>Time range for train departures</p>\n            </Row>\n            <Row>\n              <Form.Item\n                label=\"From\"\n                validateStatus={timeDepartureError ? 'error' : ''}\n                help={timeDepartureError || ''}\n              >\n                <DataField\n                  label=\"From\"\n                  value={getDataValue('timeOffsetFrom', 'HH:mm')}\n                  isDisabled={false}\n                >\n                  {getFieldDecorator('timeOffsetFrom', {\n                    initialValue: moment()\n                      .seconds(0)\n                      .minutes(15)\n                      .hours(0),\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Please input from time offset!',\n                      },\n                    ],\n                  })(\n                    <TimePicker\n                      format=\"HH:mm\"\n                      onChange={(currTime, currTimeStr) => {\n                        setFieldsValue({ timeOffsetFrom: currTimeStr });\n                      }}\n                    />,\n                  )}\n                </DataField>\n              </Form.Item>\n              <Form.Item\n                label=\"To\"\n                validateStatus={timeDepartureError ? 'error' : ''}\n                help={timeDepartureError || ''}\n              >\n                <DataField\n                  label=\"To\"\n                  value={getDataValue('timeOffsetTo', 'HH:mm')}\n                  isDisabled={false}\n                >\n                  {getFieldDecorator('timeOffsetTo', {\n                    initialValue: moment()\n                      .seconds(0)\n                      .minutes(45)\n                      .hours(0),\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Please input from time offset!',\n                      },\n                    ],\n                  })(\n                    <TimePicker\n                      format=\"HH:mm\"\n                      onChange={(currTime, currTimeStr) => {\n                        setFieldsValue({ timeOffsetTo: currTimeStr });\n                      }}\n                    />,\n                  )}\n                </DataField>\n              </Form.Item>\n            </Row>\n          </Collapse.Panel>\n        </Collapse>\n      </Row>\n      <Row>\n        <Col>\n          <Button\n            size=\"large\"\n            block\n            className=\"departure-form__search-button\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={hasErrors(getFieldsError())}\n          >\n            Play\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n}\n\nconst WrappedHorizontalLoginForm = Form.create({ name: 'departure-form' })(\n  SearchDeparturesForms,\n);\n\nexport default WrappedHorizontalLoginForm;\n","\nimport axios from 'axios';\n\nexport default class HttpClient {\n  constructor({ protocol = 'https://', domain }) {\n    this.config = {\n      protocol,\n      domain,\n    };\n  }\n\n  async request({ method = 'get', path, queryString = null }) {\n    const url = this.buildUrl({ path, queryString });\n    const res = await axios[method.toLowerCase()](url);\n    return res.data || {};\n  }\n\n  buildUrl({ path, queryString }) {\n    const { protocol, domain } = this.config;\n    return `${protocol}${domain}${path ? `/${path}` : ''}${queryString ? `?${queryString}` : ''}`;\n  }\n}\n","function stampValue(value) {\n  return {\n    createdDate: new Date(),\n    value,\n  };\n}\n\nexport function get(key) {\n  let item = localStorage.getItem(key);\n  item = JSON.parse(item);\n  if (!item) {\n    return item;\n  }\n  return item.value;\n}\n\nexport function set(key, value) {\n  let currValue = stampValue(value);\n  currValue = JSON.stringify(currValue);\n  localStorage.setItem(key, currValue);\n}\n\nexport function remove(key) {\n  localStorage.removeItem(key);\n}\n\nexport function cleanStorage() {\n  const storageEntries = Object.entries(localStorage);\n  storageEntries.forEach((e) => {\n    const value = JSON.parse(e[1]);\n    if (Date.now() - new Date(value.createdDate) > 0) {\n      remove(e[0]);\n    }\n  });\n}\n\nexport default {\n  get,\n  set,\n  remove,\n  cleanStorage,\n};\n","import HttpClient from './httpClient';\nimport { get, set } from './localStorage';\n\nexport default class Http {\n  constructor(args) {\n    this.client = new HttpClient({ ...args });\n  }\n\n  async request(args) {\n    const { method = 'get', path } = args;\n\n    if (method === 'get') {\n      const cachedResult = get(path);\n      if (cachedResult && cachedResult.length !== 0) {\n        return Promise.resolve(cachedResult);\n      }\n    }\n\n    const response = await this.client.request(args);\n    set(path, response);\n    return response;\n  }\n}\n","\nimport React, { useState } from 'react';\nimport {\n  Row, Col, Alert,\n} from 'antd';\nimport RevealedItem from '../../Components/RevealedItem';\nimport { randomNumber } from '../../Services/helpers';\nimport Form from '../../Components/Form';\nimport TrainsAPI from '../../Apis/trainApi';\n\nconst trainsApi = new TrainsAPI();\n\nexport default function PlayGame() {\n  const [departures, setDepartures] = useState([]);\n  const [randomDeparture, setRandomDeparture] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  function selectRandomDeparture(currDepartures) {\n    const totalDepartures = currDepartures.length;\n    const random = randomNumber(totalDepartures) - 1;\n    setRandomDeparture(currDepartures[random]);\n    setIsVisible(true);\n  }\n\n  async function getDepartures({\n    date, time, offsetFrom, offsetTo, trainStation,\n  }) {\n    try {\n      setIsLoading(true);\n      const result = await trainsApi.getTrains(\n        trainStation,\n        date,\n        time,\n        offsetFrom,\n        offsetTo,\n      );\n      setDepartures(result);\n\n      selectRandomDeparture(result);\n      setIsLoading(false);\n    } catch (error) {\n      setErrorMessage(error.message || error);\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Row className=\"content-wrapper__row\">\n        <Col sm={{ span: 12, offset: 6 }} xs={{ span: 24, offset: 0 }}>\n          <Form onSubmit={getDepartures} />\n        </Col>\n      </Row>\n      { errorMessage && errorMessage.length && (\n      <Row className=\"content-wrapper__row\">\n        <Col sm={{ span: 12, offset: 6 }} xs={{ span: 24, offset: 0 }}>\n          <Alert\n            message=\"Error\"\n            description={errorMessage}\n            type=\"error\"\n            showIcon\n          />\n        </Col>\n      </Row>\n      )}\n      <Row className=\"content-wrapper__row\">\n        <Col sm={{ span: 12, offset: 6 }} xs={{ span: 24, offset: 0 }}>\n          <RevealedItem\n            key={randomDeparture.destination_name}\n            isVisible={isVisible}\n            isLoading={isLoading}\n            title={randomDeparture.destination_name}\n            departureTime={randomDeparture.aimed_departure_time}\n            platform={randomDeparture.platform}\n            totalItems={departures.length}\n          />\n          {/* <List data={departures} /> */}\n        </Col>\n      </Row>\n    </>\n  );\n}\n","import moment from 'moment';\nimport Http from '../Services/http';\n\nconst appKey = process.env.REACT_APP_TRANSPORTAPI_APP_KEY;\nconst appId = process.env.REACT_APP_TRANSPORTAPI_APP_ID;\n\nconst dateFormat = 'YYYY-MM-DD';\nconst timeFormat = 'HH:mm';\nconst offsetFormat = 'HH:mm:ss';\n\nfunction getOffsetTime(dateTime) {\n  const noDigits = '2-digit';\n  const options = {\n    hour: noDigits,\n    minute: noDigits,\n    second: noDigits,\n  };\n  const date = new Date(dateTime);\n  return date.toLocaleTimeString('en-gb', options);\n}\n\nexport default class TrainsAPI {\n  constructor() {\n    this.http = new Http({\n      domain: 'transportapi.com/',\n    });\n  }\n\n  async getTrains(trainStation, date, time, fromOffsetTime, toOffsetTime) {\n    if (!date || !time) {\n      throw new Error('Date and time are missing');\n    }\n    try {\n      const formatedDate = moment(date).format(dateFormat);\n      const formatedTime = moment(time).format(timeFormat);\n\n      const fromOffset = fromOffsetTime.format(offsetFormat);\n      const toOffset = toOffsetTime.format(offsetFormat);\n\n      const queryString = [\n        `app_id=${appId}`,\n        `app_key=${appKey}`,\n        'train_status=passenger',\n        `from_offset=PT${fromOffset}`,\n        `to_offset=PT${toOffset}`,\n      ];\n\n      const result = await this.http.request({\n        path: `v3/uk/train/station/${trainStation}/${formatedDate}/${formatedTime}/timetable.json`,\n        queryString: queryString.join('&'),\n      });\n\n      return (\n        (result && result.departures && result.departures.all)\n        || []\n      );\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n}\n","import React from 'react';\n\nexport default function HowToPlay() {\n  return <div>Comming Soon</div>;\n}\n","import React from 'react';\nimport Play from './Pages/Play';\nimport HowTo from './Pages/HowTo';\n\nconst routes = [\n  {\n    component: (props) => <Play {...props} />,\n    path: '/',\n    exact: true,\n    label: 'Home',\n  },\n  {\n    path: '/how-to',\n    label: 'How to play',\n    exact: true,\n    component: (props) => <HowTo {...props} />,\n  },\n];\n\nexport default routes;\n","import React from 'react';\nimport { Layout, Menu } from 'antd';\nimport {\n  HashRouter as Router, Switch, Route, Link,\n} from 'react-router-dom';\nimport Routes from '../routes';\n\nconst { Content, Footer } = Layout;\n\n\nexport default function Page() {\n  return (\n    <Layout className=\"layout App\" theme=\"light\">\n      <Router>\n        {/* <Menu mode=\"horizontal\">\n          {Routes.map((page) => (\n            <Menu.Item key={page.path}>\n              <Link to={page.path}>{page.label}</Link>\n            </Menu.Item>\n          ))}\n        </Menu> */}\n        <Content theme=\"light\" className=\"content-wrapper\">\n          <Switch>\n            {Routes.map((route) => (\n              <Route\n                key={route.path}\n                path={route.path}\n                exact={route.exact}\n                component={route.component}\n              />\n            ))}\n          </Switch>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>\n          ©{new Date().getFullYear()} Created by D&J\n        </Footer>\n      </Router>\n    </Layout>\n  );\n}\n","import React from 'react';\nimport './App.less';\nimport Page from './Pages';\n\nfunction App() {\n  return <Page />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { cleanStorage } from './Services/localStorage';\n\nif (process.env.NODE_ENV !== 'development') {\n  cleanStorage();\n}\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}